import flet as ft
import asyncio
import time
from datetime import datetime
import uuid
from .message import Message, ChatMessage
from services.supabase import SupabaseService
from services.anthropic import AnthropicService
from utils.alerts import CustomAlertDialog
from postgrest.exceptions import APIError
from utils.logger import get_logger
from utils.quebra_mensagem import integrate_with_chat
import sys
import logging

# Configura logger para UTF-8
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
logger = get_logger("supafit.trainer_chat.chat_logic")
logger.handlers[0].setFormatter(
    logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
)
logger.handlers[0].stream.reconfigure(encoding="utf-8")

COOLDOWN_SECONDS = 2


async def load_chat_history(
    supabase_service: SupabaseService,
    user_id: str,
    chat_container: ft.ListView,
    page: ft.Page,
) -> list:
    """Carrega o hist√≥rico de conversa com anima√ß√£o de entrada."""
    try:
        import json

        chat_container.controls.clear()
        chat_container.controls.append(
            ChatMessage(
                Message(
                    user_name="Treinador",
                    text="Ol√°! Como posso ajudar com seu treino hoje? üòÑ",
                    user_type="trainer",
                    created_at=datetime.now().isoformat(),
                    show_avatar=True,
                ),
                page,
            )
        )

        resp = (
            supabase_service.client.table("trainer_qa")
            .select("message")
            .eq("user_id", user_id)
            .order("updated_at")
            .limit(50)
            .execute()
        )

        history = []

        for item in resp.data:
            raw_message = item.get("message", [])
            if isinstance(raw_message, str):
                try:
                    messages = json.loads(raw_message)
                except Exception as e:
                    logger.error(f"Erro ao decodificar mensagem JSON: {e}")
                    continue
            else:
                messages = raw_message

            history.extend(messages)
            for msg in messages:
                chat_container.controls.append(
                    ChatMessage(
                        Message(
                            user_name="Voc√™" if msg["role"] == "user" else "Treinador",
                            text=msg["content"] or "Mensagem vazia",
                            user_type=msg["role"],
                            created_at=msg["timestamp"],
                            show_avatar=False,
                        ),
                        page,
                    )
                )

        page.update()
        logger.info(f"Hist√≥rico carregado para user_id: {user_id}")
        return history

    except APIError as e:
        if e.code == "42501":
            if supabase_service.refresh_session():
                page.go(page.route)
                return []
            else:
                page.open(
                    ft.SnackBar(ft.Text("Sess√£o expirada. Fa√ßa login novamente.", color=ft.Colors.WHITE), bgcolor=ft.Colors.RED_700)
                )
                page.update()
                page.go("/login")
                return []
        logger.error(f"Erro ao carregar hist√≥rico: {str(e)}")
        page.open(
            ft.SnackBar(ft.Text(f"Erro ao carregar hist√≥rico: {str(e)}", color=ft.Colors.WHITE), bgcolor=ft.Colors.RED_700)
        )
        page.update()
        return []


async def clear_chat(
    supabase_service: SupabaseService,
    user_id: str,
    chat_container: ft.ListView,
    page: ft.Page,
):
    """Limpa o hist√≥rico com confirma√ß√£o visual."""

    async def confirm_clear(e):
        if e.control.text == "Sim":
            try:
                supabase_service.client.table("trainer_qa").delete().eq(
                    "user_id", user_id
                ).execute()
                chat_container.controls.clear()
                chat_container.controls.append(
                    ChatMessage(
                        Message(
                            user_name="Treinador",
                            text="Ol√°! Como posso ajudar com seu treino hoje? üòÑ",
                            user_type="trainer",
                            created_at=datetime.now().isoformat(),
                            show_avatar=True,
                        ),
                        page,
                    )
                )
                page.update()
                page.open(
                    ft.SnackBar(
                        ft.Text("Chat limpo com sucesso!", color=ft.Colors.WHITE),
                        bgcolor=ft.Colors.GREEN_700,
                    )
                )
                page.update()
                logger.info(f"Chat limpo para user_id: {user_id}")
            except APIError as ex:
                if ex.code == "42501":
                    if supabase_service.refresh_session():
                        page.go(page.route)
                    else:
                        page.open(
                            ft.SnackBar(
                                ft.Text("Sess√£o expirada. Fa√ßa login novamente.", color=ft.Colors.WHITE),
                                bgcolor=ft.Colors.RED_700,
                            )
                        )
                        page.update()
                        page.go("/login")
                else:
                    logger.error(f"Erro ao limpar chat: {str(ex)}")
                    page.open(
                        ft.SnackBar(
                            ft.Text(f"Erro ao limpar chat: {str(ex)}", color=ft.Colors.WHITE),
                            bgcolor=ft.Colors.RED_700,
                        )
                    )
                    page.update()
            finally:
                page.close(confirm_dialog)
                page.update()
        else:
            page.close(confirm_dialog)
            page.update()

    confirm_dialog = CustomAlertDialog(
        content=ft.Text("Tem certeza que deseja limpar todo o hist√≥rico de mensagens?"),
        bgcolor=ft.Colors.GREY_900,
    )
    confirm_dialog.actions = [
        ft.TextButton("Sim", on_click=confirm_clear),
        ft.TextButton("N√£o", on_click=confirm_clear),
    ]
    confirm_dialog.show(page)


async def ask_question(
    e,
    page: ft.Page,
    supabase_service: SupabaseService,
    anthropic: AnthropicService,
    question_field: ft.TextField,
    ask_button: ft.IconButton,
    chat_container: ft.ListView,
    user_data: dict,
    user_id: str,
    last_question_time: list,
    history_cache: list,
):
    """Processa a pergunta do usu√°rio com valida√ß√µes, anima√ß√µes e feedback visual."""
    current_time = time.time()
    if current_time - last_question_time[0] < COOLDOWN_SECONDS:
        page.open(
            ft.SnackBar(
                ft.Text("Aguarde alguns segundos antes de enviar outra pergunta.", color=ft.Colors.WHITE),
                bgcolor=ft.Colors.RED_700,
            )
        )
        page.update()
        return

    question = question_field.value.strip()
    if not question:
        question_field.error_text = "Digite uma mensagem!"
        page.update()
        return
    if len(question) > 500:
        question_field.error_text = "Mensagem muito longa (m√°ximo 500 caracteres)."
        page.update()
        return
    if anthropic.is_sensitive_question(question):
        page.open(ft.SnackBar(ft.Text("Pergunta sens√≠vel detectada.", color=ft.Colors.WHITE), bgcolor=ft.Colors.RED_700))
        page.update()
        return

    ask_button.disabled = True
    ask_button.icon_color = ft.Colors.GREY_400
    question_field.value = ""
    page.update()

    try:
        question_id = str(uuid.uuid4())
        chat_container.controls.append(
            ChatMessage(
                Message(
                    user_name="Voc√™",
                    text=question,
                    user_type="user",
                    created_at=datetime.now().isoformat(),
                    show_avatar=False,
                ),
                page,
            )
        )
        if len(chat_container.controls) > 50:
            chat_container.controls.pop(0)

        typing_indicator = ft.AnimatedSwitcher(
            content=ft.Row(
                [
                    ft.Text("Treinador est√° digitando...", size=14, italic=True),
                    ft.ProgressRing(width=16, height=16, stroke_width=2),
                ],
                alignment=ft.MainAxisAlignment.START,
                spacing=8,
            ),
            transition=ft.AnimatedSwitcherTransition.FADE,
            duration=300,
        )

        system_prompt = f"""
        # IDENTIDADE E PAPEL PRINCIPAL
        Voc√™ √© Coach Coachito, o treinador virtual oficial do SupaFit - um personal trainer experiente, motivacional e genuinamente interessado no sucesso de cada aluno. Sua miss√£o √© ser o parceiro de treino que todos gostariam de ter: conhecedor, motivador, paciente e sempre focado nos resultados reais.

        ## PERSONALIDADE E COMUNICA√á√ÉO
        - **Tom**: Amig√°vel, motivacional e profissional - como um personal trainer experiente que realmente se importa
        - **Estilo**: Conversational e humano, evitando linguagem rob√≥tica ou excessivamente formal
        - **Emojis**: Use com modera√ß√£o (1-2 por resposta) apenas para expressar entusiasmo genu√≠no ou celebrar conquistas
        - **Tratamento**: Sempre pelo nome quando dispon√≠vel, criando conex√£o pessoal

        ## DADOS DO ALUNO (Contexto Personalizado)
        - **Nome**: {user_data.get('name', 'Campe√£o(√£)')}
        - **Idade**: {user_data.get('age', 'N/A')} anos
        - **Peso Atual**: {user_data.get('weight', 'N/A')} kg
        - **Altura**: {user_data.get('height', 'N/A')} cm
        - **Objetivo Principal**: {user_data.get('goal', 'N/A')}
        - **N√≠vel de Experi√™ncia**: {user_data.get('level', 'N/A')}
        - **Data/Hora**: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

        ## DIRETRIZES FUNDAMENTAIS (80% Preven√ß√£o)

        ### ‚ö†Ô∏è SEGURAN√áA EM PRIMEIRO LUGAR
        - NUNCA recomende exerc√≠cios sem conhecer limita√ß√µes f√≠sicas ou les√µes existentes
        - SEMPRE sugira consulta m√©dica antes de iniciar programas intensos
        - Identifique sinais de overtraining ou fadiga excessiva nas descri√ß√µes do usu√°rio
        - Interrompa orienta√ß√µes se detectar relatos de dor, desconforto ou sintomas preocupantes

        ### üö´ LIMITA√á√ïES PROFISSIONAIS
        - N√ÉO prescreva medicamentos, suplementos espec√≠ficos ou dietas restritivas
        - N√ÉO diagnostique les√µes ou condi√ß√µes m√©dicas
        - N√ÉO substitua acompanhamento de nutricionista ou m√©dico
        - Sempre direcione para profissionais quando necess√°rio

        ### üéØ PERSONALIZA√á√ÉO OBRIGAT√ìRIA
        - Considere SEMPRE os dados do perfil antes de qualquer recomenda√ß√£o
        - Adapte intensidade e complexidade baseado no n√≠vel de experi√™ncia
        - Respeite limita√ß√µes de tempo, equipamentos e espa√ßo dispon√≠vel
        - Mantenha coer√™ncia com objetivos declarados

        ### üìö EDUCA√á√ÉO E CONSCI√äNCIA
        - Explique o "porqu√™" por tr√°s das recomenda√ß√µes
        - Eduque sobre progress√£o segura e realista
        - Promova mindset de longo prazo vs resultados r√°pidos
        - Ensine sobre import√¢ncia do descanso e recupera√ß√£o

        ## A√á√ïES DIRETAS (20% A√ß√£o)

        ### üí™ QUANDO ORIENTAR EXERC√çCIOS
        ```
        ‚úÖ Forne√ßa 3-5 exerc√≠cios espec√≠ficos com:
        - S√©ries e repeti√ß√µes adequadas ao n√≠vel
        - Descri√ß√£o clara da execu√ß√£o
        - Progress√µes e regress√µes
        - Foco no objetivo do usu√°rio

        ‚úÖ Inclua sempre:
        - Aquecimento apropriado
        - Tempo de descanso entre s√©ries
        - Sinais de que deve parar
        ```

        ### üçé ORIENTA√á√ïES NUTRICIONAIS GERAIS
        ```
        ‚úÖ Pode orientar sobre:
        - Princ√≠pios b√°sicos de alimenta√ß√£o saud√°vel
        - Timing de nutri√ß√£o (pr√©/p√≥s treino)
        - Hidrata√ß√£o adequada
        - Import√¢ncia de macronutrientes

        ‚ùå N√ÉO pode:
        - Prescrever dietas espec√≠ficas
        - Calcular calorias exatas
        - Recomendar cortes dr√°sticos
        ```

        ### üéâ MOTIVA√á√ÉO E SUPORTE
        - Celebre pequenas vit√≥rias e progressos
        - Reframe obst√°culos como oportunidades de crescimento
        - Ofere√ßa alternativas quando planos n√£o funcionam
        - Mantenha expectativas realistas e alcan√ß√°veis

        ## PADR√ïES DE RESPOSTA

        ### Para Iniciantes:
        - Foque em movimentos b√°sicos e progress√£o gradual
        - Enfatize a import√¢ncia da t√©cnica sobre intensidade
        - Explique benef√≠cios de cada exerc√≠cio

        ### Para Intermedi√°rios/Avan√ßados:
        - Ofere√ßa varia√ß√µes mais desafiadoras
        - Discuta periodiza√ß√£o e progress√£o
        - Aprofunde em t√©cnicas espec√≠ficas

        ### Para D√∫vidas Gerais:
        - Responda de forma educativa e encorajadora
        - Conecte a resposta com os objetivos espec√≠ficos
        - Sugira pr√≥ximos passos pr√°ticos

        ## EXEMPLO DE RESPOSTA IDEAL:
        "Oi [Nome]! üí™ Considerando seu objetivo de [objetivo] e seu n√≠vel [n√≠vel], vou te ajudar com isso...

        [Orienta√ß√£o espec√≠fica baseada nos dados]

        Lembre-se: [princ√≠pio educativo relevante]

        Como est√° se sentindo com os treinos atuais? Alguma d√∫vida espec√≠fica?"

        ## LEMBRETE FINAL:
        Voc√™ √© mais que um chatbot - √© um parceiro de jornada fitness. Cada intera√ß√£o deve deixar o usu√°rio mais motivado, informado e confiante em sua capacidade de alcan√ßar seus objetivos de forma segura e sustent√°vel.
        """
        answer = anthropic.answer_question(question, history_cache, system_prompt)
        if not answer or "desculpe" in answer.lower():
            raise ValueError("Resposta inv√°lida do Anthropic")

        messages_with_delays = integrate_with_chat(answer)

        message_json = [
            {
                "role": "user",
                "content": question,
                "message_id": question_id,
                "timestamp": datetime.now().isoformat(),
            }
        ]

        for msg, delay in messages_with_delays:
            if not msg.strip():  # Ignora mensagens vazias
                continue
            chat_container.controls.append(typing_indicator)
            page.update()
            await asyncio.sleep(0.3)  # Breve pausa para mostrar "escrevendo"
            chat_container.controls.remove(typing_indicator)

            response_id = str(uuid.uuid4())
            message_json.append(
                {
                    "role": "assistant",
                    "content": msg,
                    "message_id": response_id,
                    "timestamp": datetime.now().isoformat(),
                }
            )
            history_cache.append(message_json[-1])
            chat_container.controls.append(
                ChatMessage(
                    Message(
                        user_name="Treinador",
                        text=msg.strip() or "Mensagem vazia",
                        user_type="assistant",
                        created_at=datetime.now().isoformat(),
                        show_avatar=False,
                    ),
                    page,
                )
            )
            if len(chat_container.controls) > 50:
                chat_container.controls.pop(0)
            await asyncio.sleep(delay * 0.7)  # Reduz delay em 30%
            page.update()

        if len(message_json) > 1:  # Insere apenas se houver mensagens v√°lidas
            supabase_service.client.table("trainer_qa").insert(
                {
                    "user_id": user_id,
                    "message": message_json,
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat(),
                }
            ).execute()
        question_field.value = ""
        question_field.error_text = None
        page.open(
            ft.SnackBar(
                ft.Text("Pergunta enviada com sucesso!", color=ft.Colors.WHITE),
                bgcolor=ft.Colors.GREEN_700,
            )
        )
        page.update()
        last_question_time[0] = current_time
        logger.info(f"Pergunta processada com sucesso para user_id: {user_id}")

    except Exception as ex:
        logger.error(f"Erro ao processar pergunta: {str(ex)}")
        page.open(
            ft.SnackBar(
                ft.Text(f"Erro ao processar pergunta: {str(ex)}", color=ft.Colors.WHITE),
                bgcolor=ft.Colors.RED_700,
            )
        )
    finally:
        ask_button.disabled = False
        ask_button.icon_color = ft.Colors.BLUE_400
        page.update()
